@startuml

package "主程序" {
    start
    :初始化变量和载入配置文件;
    partition "初始化模型推断模块" {
        :生成face_recognizer实例;
        :生成fire_detector实例;
    }
    partition #SkyBlue "初始化log和alarm模块" {
        :检查各日志文件夹;
        partition " " {
            note
                日志归档
            end note
            :超过七天的日志压损存储;
            :超过三十天的日志删除;
        }
        partition " " {
            note
                日志轮转
            end note
            :按照当前系统时间生成日志文件夹;
            :设置日志轮转条件, 实例化logger对象;
        }
        partition " " {
            note
                初始化alarm(邮件实现)
            end note
            :读入配置参数, 设定报警邮件地址;
        }
    }
    rectangle "初始化数据流模块, 封装dataset迭代器"{
        :传出dataset;
    }
    while (从dataset中取得帧) is (true)
        partition #OrangeRed "帧推断模块" {
            :接受传入帧;
            if (在非法闯入检测时间段内) then (是)
            :传入人脸识别模块推断;
            endif
            :传入火焰检测模块推断;
            :整合拼接检测结果;
        }
        :传出检测结果;
        if (检测到物体) then (是)
            :在图像上绘制边界框和标签;
            :更新检测队列缓冲;
            
            partition #lightGreen "警告和日志模块" {
                :检测结果写入文本log;
                if (检测到异常(火焰/陌生人)) then (是)
                    if (报警开关打开触发AND(尚未发送警报OR距离上次报警过去一段时间)) then (是)
                        :将当前帧保存为图像;
                        :发送带有图像和相关信息的警报电子邮件;
                        :重置报警计时器;
                    endif
                    if (未在录制中) then (是)
                        :开始录制并初始化视频编写器;
                    endif
                    if (正在录制中) then (是)
                        :继续将帧写入视频;
                        if (达到最大长度或异常消失) then (是)
                        :停止录制并释放视频编写器;
                        endif
                    endif
                endif
            }
        else
            :记录“未检测到物体”;
        endif
        
        :将结果图像转换为Base64编码;
        :使用Socket发送图像到前端;
    endwhile
    stop
}
package #LightYellow "dataset迭代器" {
    start
    :opencv载入摄像头(视频文件)数据流cam;
    while (cam.read取出帧) is (true)
        :对帧进行resize, BGR转化RGB, 数值连续化等前处理操作;
        :传出帧数据;
    endwhile
    stop
}

@enduml
