@startuml 系统类图

abstract class detector {
    + __init__()
    + init_model()
    + infer()
}


class fire_detector {
  - weights: str
  - source: str
  ' - data: str
  - imgsz: Tuple[int, int]
  ...
  - conf_thres: float
  ' - iou_thres: float
  - max_det: int
  ' - device: str
  - view_img: bool
'   - save_txt: bool
'   - save_conf: bool
'   - save_crop: bool
'   - nosave: bool
'   - classes: Optional[List[int]]
'   - agnostic_nms: bool
'   - augment: bool
'   - visualize: bool
'   - update: bool
'   - project: str
'   - name: str
'   - exist_ok: bool
'   - line_thickness: int
'   - hide_labels: bool
'   - hide_conf: bool
'   - half: bool
'   - dnn: bool
'   - vid_stride: int
  - model: DetectMultiBackend
'   - names: List[str]
'   - stride: int
'   - pt: bool
  + __init__()
  + init_model()
  + load_model()
  + infer()
}

class DetectMultiBackend extends nn.module{
  - weights: Union[str, Path]
  - device: str
  - dnn: bool
  - data: str
  - fp16: bool
  - stride: int
  - names: List[str]
  - pt: bool
  + warmup()
}

class dlib.FaceRecognitionUtils {
    + face_distance(face_encodings, face_to_compare)
    + load_image_file(file, mode)
    + _raw_face_locations(img, number_of_times_to_upsample=1, model="hog")
    + face_locations(img, number_of_times_to_upsample=1, model="hog")
    + _raw_face_locations_batched(images, number_of_times_to_upsample=1, batch_size=128)
    + batch_face_locations(images, number_of_times_to_upsample=1, batch_size=128)
    + _raw_face_landmarks(face_image, face_locations=None, model="large")
    + face_landmarks(face_image, face_locations=None, model="large")
    + face_encodings(face_image, known_face_locations=None, num_jitters=1, model="small")
    + compare_faces(known_face_encodings, face_encoding_to_check, tolerance=0.6)
}


class face_recognizer {
  - known_face_encodings: dict
  + __init__()
  + init_model()
  + infer(im)
}

interface Iterator {
    + __iter__() : LoadStreams
    + __next__() : Tuple[List[str], ndarray, List[Optional[ndarray]], None]
    + __len__() : int
}

class LoadStreams {
    - mode: str
    - img_size: int
    - stride: int
    - imgs: List[Optional[ndarray]]
    - sources: List[str]
    - rect: bool
    + __init__(...)
    - update(index: int, cap: cv2.VideoCapture)
    + __iter__() : LoadStreams
    ' + __next__() : Tuple[List[str], ndarray, List[Optional[ndarray]], None]
    + __next__() : ...
    + __len__() : int
}

class LoadImages {
    - img_size: int
    - stride: int
    - files: List[str]
    - nf: int
    - video_flag: List[bool]
    - mode: str
    - cap: Optional[cv2.VideoCapture]
    - frame: int
    - nframes: int
    + __init__(path: str, img_size: int, stride: int)
    + __iter__() : LoadImages
    ' + __next__() : Tuple[str, ndarray, ndarray, Optional[cv2.VideoCapture]]
    + __next__() : ...
    + new_video(path: str)
    + __len__() : int
}

class detect_tasks_manager {
    - config: dict 
    - faceRecognizer: face_recognizer
    - fireDetector: fire_detector
    - device: str
    - fp16: bool
    - on_alarm: bool
    - patience: float
    - save_dir: str
    - source: str
    - webcam: bool
    - dataset: Union[LoadStreams, LoadImages]
    - alarm: alarm
    - logger: logger
    + __init__()
    + init_dataloader()
    ' + preprocess()
    + init_alarm()
    + init_logger()
    + is_within_time_range()
    ' + init_logger()
    + infer_frame(im: ndarray) : tuple
    + gen_frame_stream(socketio: SocketIO = None)

}

class alarm {
  - smtp_server
  - smtp_port
  - sender_email
  - password
  + __init__()
  + setup(recipient_email: str)
  + send_alert(subject: str, body: str, image_path: str)
}

class logger {
  - sub_log_dir
  - archive_dir
  + __init__()
  + preprocess()
  + setup(maxMB: float, backupCount: int)
  + log(information: str)
}

class cv2.VideoCapture  {}

package mail {
  class email
  class smtplib
}

package log {
  class logging
  class tarfile
}


DetectMultiBackend --> fire_detector
dlib.FaceRecognitionUtils --> face_recognizer
detector <|-- fire_detector
detector <|-- face_recognizer

Iterator <|.. LoadStreams
Iterator <|.. LoadImages

cv2.VideoCapture  <-- LoadStreams
cv2.VideoCapture  <-- LoadImages
cv2.VideoCapture <-[hidden]r- Iterator

face_recognizer --> detect_tasks_manager
LoadImages --> detect_tasks_manager
LoadStreams --> detect_tasks_manager
alarm -u-> detect_tasks_manager
mail -up-> alarm
logger -u-> detect_tasks_manager
logger -[hidden]u-> alarm
fire_detector --> detect_tasks_manager
log -left-> logger
alarm -[hidden]right-> logger
cv2 -[hidden]left-> Iterator
@enduml
