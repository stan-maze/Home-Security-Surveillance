@startuml 系统类图

abstract class detector {
    + init_model()
    + infer()
}


class fire_detector {
  - weights: str
  - source: str
  - data: str
  - imgsz: Tuple[int, int]
  ...
  - conf_thres: float
  - iou_thres: float
  - max_det: int
  - device: str
  - view_img: bool
'   - save_txt: bool
'   - save_conf: bool
'   - save_crop: bool
'   - nosave: bool
'   - classes: Optional[List[int]]
'   - agnostic_nms: bool
'   - augment: bool
'   - visualize: bool
'   - update: bool
'   - project: str
'   - name: str
'   - exist_ok: bool
'   - line_thickness: int
'   - hide_labels: bool
'   - hide_conf: bool
'   - half: bool
'   - dnn: bool
'   - vid_stride: int
'   - model: DetectMultiBackend
'   - names: List[str]
'   - stride: int
'   - pt: bool
  + __init__()
  + init_model()
  + load_model()
  + infer()
}

class DetectMultiBackend extends nn.module{
  - weights: Union[str, Path]
  - device: str
  - dnn: bool
  - data: str
  - fp16: bool
  - stride: int
  - names: List[str]
  - pt: bool
  + warmup()
}

class face_recognizer {
  - known_face_encodings: dict
  + __init__()
  + init_model()
  + infer(im)
}



class LoadStreams {
    - mode: str
    - img_size: int
    - stride: int
    - imgs: List[Optional[ndarray]]
    - sources: List[str]
    - rect: bool
    + __init__(sources: Union[str, List[str]], img_size: int, stride: int)
    - update(index: int, cap: cv2.VideoCapture)
    + __iter__() : LoadStreams
    + __next__() : Tuple[List[str], ndarray, List[Optional[ndarray]], None]
    + __len__() : int
}

class LoadImages {
    - img_size: int
    - stride: int
    - files: List[str]
    - nf: int
    - video_flag: List[bool]
    - mode: str
    - cap: Optional[cv2.VideoCapture]
    - frame: int
    - nframes: int
    + __init__(path: str, img_size: int, stride: int)
    + __iter__() : LoadImages
    + __next__() : Tuple[str, ndarray, ndarray, Optional[cv2.VideoCapture]]
    + new_video(path: str)
    + __len__() : int
}

class detect_tasks_manager {
    - config: dict
    - faceRecognizer: face_recognizer
    - fireDetector: fire_detector
    - device: str
    - fp16: bool
    - recording: bool
    - on_alarm: bool
    - patience: int
    - recemail: str
    - save_dir: str
    - source: str
    - webcam: bool
    - dataset: Union[LoadStreams, LoadImages]
    - sub_log_dir: str
    - archive_dir: str
    - current_log_dir: str
    - logger: logging.Logger
    - log_handler: logging.handlers.RotatingFileHandler
    + __init__()
    + init_dataloader()
    + preprocess()
    + init_logger()
    + infer_frame(im: ndarray) : tuple
    + gen_frame()

}

DetectMultiBackend --> fire_detector

detector <|-- fire_detector
detector <|-- face_recognizer

face_recognizer --> detect_tasks_manager
LoadImages --> detect_tasks_manager
LoadStreams --> detect_tasks_manager
send_email --> detect_tasks_manager
logger --> detect_tasks_manager
fire_detector --> detect_tasks_manager


@enduml
